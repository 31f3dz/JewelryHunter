using System.Collections;
using System.Collections.Generic;
using UnityEditor.SceneManagement;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    private float axisH; // 左右のキーの値を格納
    Rigidbody2D rbody; // Rigidbody2Dの情報を扱うための媒体
    Animator animator; // Animatorの情報を扱うための媒体
    public float speed = 3.0f; // 歩くスピード
    bool isJump; // ジャンプ中かどうか
    bool onGround; // 地面判定
    public LayerMask groundLayer; // 地面判定の対象のレイヤーが何かを決めておく
    public float jump = 9.0f; // ジャンプ力

    // Start is called before the first frame update
    void Start()
    {
        // PlayerについているRigidbody2Dコンポーネントを変数rbodyに宿した。以後、Rigidbody2Dコンポーネントの機能はrbodyという変数を通してプログラム側から活用できる
        rbody = GetComponent<Rigidbody2D>();

        // PlayerについているAnimatorコンポーネントを変数animatorに宿した
        animator = GetComponent<Animator>();
    }

    // Update is called once per frame
    void Update()
    {
        if (GameController.gameState != "playing")
        {
            return; // Updateの処理を強制終了
        }

        // 左右のキーが押された場合、どちらの値だったのかをaxisHに格納
        // 引数Horizontalの場合：水平方向のキーが何か押された場合、左なら-1、右なら1、何も押されていないのであれば常に0を返すメソッド
        axisH = Input.GetAxisRaw("Horizontal");

        // もしaxisHが正の数なら右向き
        if (axisH > 0)
        {
            // this.gameObject.GetComponent<Transform>().localScaleをMonoBehaviourが省略
            transform.localScale = new Vector3(1, 1, 1);
            animator.SetBool("run", true); // 担当しているコントローラーのパラメータを変える
        }
        // でなければ、もしaxisHが負の数なら左向き
        else if (axisH < 0)
        {
            transform.localScale = new Vector3(-1, 1, 1);
            animator.SetBool("run", true); // 担当しているコントローラーのパラメータを変える
        }
        else
        {
            animator.SetBool("run", false); // 担当しているコントローラーのパラメータを変える
        }

        // もしジャンプボタンが押されたら
        if (Input.GetButtonDown("Jump"))
        {
            Jump();
        }
    }

    private void FixedUpdate()
    {
        if (GameController.gameState != "playing")
        {
            return; // Updateの処理を強制終了
        }

        // 地面にいるかどうかをサークルキャストを使って判別
        onGround = Physics2D.CircleCast(
            transform.position, // Playerの基準点
            0.2f, // 半径
            Vector2.down, // 指定した点からどの方向にチェックを伸ばすか new Vector2(0, -1)
            0.0f, // 指定した点からどのくらいチェックの距離を伸ばすか
            groundLayer // 指定したレイヤー
        );

        // velocityに2軸の方向データ（Vector2）を代入
        rbody.velocity = new Vector2(axisH * speed, rbody.velocity.y);

        // ジャンプ中フラグが立ったら
        if (isJump)
        {
            // Rigidbody2DのAddForceメソッドによって上に押し出す
            rbody.AddForce(new Vector2(0, jump), ForceMode2D.Impulse);
            isJump = false;
        }
    }

    public void Jump()
    {
        // 地面判定がfalseならジャンプフラグは立てない
        if (onGround)
        {
            isJump = true;
            animator.SetTrigger("jump"); // ジャンプアニメのためのトリガー発動
        }
    }

    // 何かとぶつかったら発動するメソッド
    // ぶつかった相手のCollider情報を引数collisionに入れる
    // 相手にColliderがついていないと意味がない
    // ※相手のColliderがisTriggerであること
    public void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Goal")
        {
            Goal();
        }
        else if (collision.gameObject.tag == "Dead")
        {
            GameOver();
        }

        if (collision.gameObject.tag == "Item") // Itemに触れたら
        {
            ItemData itemdata = collision.gameObject.GetComponent<ItemData>(); // ぶつかったItemのスクリプトを取得
            GameController.stageScore += itemdata.value; // ぶつかったItemのスクリプトに記されているvalueの値をstageScoreに加算
            Destroy(collision.gameObject); // 相手の本体を消す
        }
    }

    public void Goal()
    {
        GameController.gameState = "gameclear";
        animator.SetBool("gameClear", true); // PlayerClearアニメをON
        PlayerStop(); // 動きを止める
    }

    public void GameOver()
    {
        GameController.gameState = "gameover";
        animator.SetBool("gameOver", true); // PlayerOverアニメをON
        PlayerStop(); // 動きを止める

        // プレイヤーを上に跳ね上げる
        rbody.AddForce(new Vector2(0, 5.0f), ForceMode2D.Impulse);
        // 当たり判定もカット
        GetComponent<CapsuleCollider2D>().enabled = false;
    }

    // プレイヤーの動きを停止
    public void PlayerStop()
    {
        // 速度を0にして止める
        rbody.velocity = new Vector2(0, 0);
    }
}
